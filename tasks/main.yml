---

- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: Put loopback base interface
  become: yes
  template:
    src: "base_{{ansible_os_family }}.j2"
    dest: /etc/network/interfaces
    owner: root
    group: bin
    mode: '0644'

- name: Debugger
  debug:
    msg: "{{ network_ether_interfaces }}"

- name: Make sure the include line is there in interfaces file
  lineinfile: >
     regexp="^source\ \/etc\/network\/interfaces.d\/\*"
     line="source /etc/network/interfaces.d/*"
     dest=/etc/network/interfaces
     state=present
     insertafter=EOF
  when: ansible_os_family == "Debian"

- name: Create the directory for interface cfg files
  file: path=/etc/network/interfaces.d  state=directory
  when: ansible_os_family == "Debian"

- name: Create the network configuration file for ethernet devices
  template: 
    src: "ethernet_{{ ansible_os_family }}.j2" 
    dest: "{{ net_path }}/ifcfg-{{ item.device }}{% if item.ipv6|default(false) %}-ipv6{% endif %}"
  loop: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces | default(false)
  register: ether_result

# - name: Ethernet reload
#   shell: "ifdown {{ item.item.device }}; ifup {{ item.item.device }}"
#   with_items: ether_result.results
#   when: ether_result is defined and item.changed

- name: Create the network configuration file for bridge devices
  template: src=bridge_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: network_bridge_interfaces
  when: network_bridge_interfaces | default(false)
  register: bridge_result

# -  name: Bridge reload
#   shell: "ifdown {{ item.item.device }}; ifup {{ item.item.device }}"
#   with_items: bridge_result.results
#   when: bridge_result is defined and item.changed
 
- name: Create the network configuration file for port on the bridge devices
  template: src=bridge_port_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  with_subelements: 
   - "{{ network_bridge_interfaces }}"
   - "{{ ports }}"
  when: network_bridge_interfaces | default(false)
  register: bridge_port_result

#-  name: Bridges reload
#   shell: "ifdown {{ item.item.1 }}; ifup {{ item.item.1 }}"
#   with_items: bridge_port_result.results
#   when: bridge_port_result is defined and item.changed

- name: Create the network configuration file for bond devices
  template: src=bond_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: network_bond_interfaces
  when: network_bond_interfaces | default(false)
  register: bond_result

- name: Make sure the bonding module is loaded
  modprobe: name=bonding state=present
  when: bond_result is changed

- name: Bond reload
  shell: "ifdown {{ item.item.device }}; ifup {{ item.item.device }}"
  with_items: "{{ bond_result.results }}" 
  when: bond_result is defined and item.changed

- name: Create the network configuration file for slave in the bond devices
  template: src=bond_slave_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  with_subelements: 
   - "{{ network_bond_interfaces }}"
   - "{{ bond_slaves }}"
  when: network_bond_interfaces | default(false)
  register: bond_port_result

# - shell: "ifdown {{ item.item.1 }}; ifup {{ item.item.1 }}"
#   with_items: bond_port_result.results
#   when: bond_port_result is defined and item.changed

